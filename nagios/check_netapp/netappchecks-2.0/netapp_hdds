#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#################################################################
#	 _  _ ___ _____ _   ___ ___    ___ _  _ ___ ___ _  __	#
#	| \| | __|_   _/_\ | _ \ _ \  / __| || | __/ __| |/ /	#
#	| .` | _|  | |/ _ \|  _/  _/ | (__| __ | _| (__| ' <	#	
#	|_|\_|___| |_/_/ \_\_| |_|    \___|_||_|___\___|_|\_\	#		
#---------------------------------------------------------------#
# Author: Benjamin Odenthal					#
# Contact: support@tuxclouds.org				#
# File: netapp_hdds						#
# Version: 1.1							#
# Revision: 07.Mar.2011						#
# Description: The purpose of this netapp_hdds is to check	#
# the functionality of all HDDs via SNMP			#
# As Result you get the of the Disks Status			#
#################################################################
netapp_hdds_default_levels = (1, 2)

def inventory_netapp_hdds(checkname, info):
    return [ (None, None, "netapp_hdds_default_levels") ]

def check_netapp_hdds(item, params, info):
    warn, crit = params
    state = 0

    if len(info[0]) != 5:
        return (3, "UNKNOWN - Invalid SNMP response")

    total, active, spare, prefail, failed = map(saveint, info[0])

    perfdata = [ ("disks", total), ("active", active), ("spare", spare),
                     ("prefail", prefail, warn, crit), ("failed", failed, warn, crit) ]
    output   = 'NetAPP No. Disks: %d, Active: %d, Spare: %d' % (total, active, spare)

    output += ', Prefail: %d' % prefail
    if prefail >= crit:
        output += ' (CRIT)'
        state = 2
    elif prefail >= warn:
        output += ' (WARN)'
        state = 1

    output += ', Failed: %d' % failed
    if failed >= crit or prefail >= crit:
        output += ' (CRIT)'
        state = 2
    elif failed >= warn or prefail >= warn:
        output += ' (WARN)'
        if state <= 1:
            state = 1

    return (state, "%s - %s" % (nagios_state_names[state], output), perfdata)

check_info["netapp_hdds"] = (check_netapp_hdds, "NetApp Disk Summary", 1, inventory_netapp_hdds)

snmp_info["netapp_hdds"] = ( ".1.3.6.1.4.1.789.1.6.4", ["1",  # diskTotalCount
                                                        "2",  # diskActiveCount
                                                        "8",  # diskSpareCount
                                                        "11", # diskPrefailedCount
                                                        "7"   # diskFailedCount
                                                       ] )

snmp_scan_functions['netapp_hdds'] = \
    lambda oid: oid("1.3.6.1.2.1.1.1.0").startswith('"NetApp Release')
